name: Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]  # Windows removed - pysam doesn't support Windows
        python-version: ['3.10', '3.11', '3.12', '3.13']  # Using conda-forge Python for better compatibility

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Conda Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          channels: conda-forge
          channel-priority: strict
          activate-environment: test
          environment-file: false
          auto-activate-base: false

      - name: Install Python ${{ matrix.python-version }}
        shell: bash -l {0}
        run: |
          conda install -y python=${{ matrix.python-version }}

      - name: Install build dependencies
        shell: bash -l {0}  # Use conda environment
        run: |
          python -m pip install --upgrade pip
          pip install "numpy>=1.21.0,<2.0.0"  # Install NumPy first for proper detection
          pip install "meson-python>=0.15.0" "Cython>=3.0.0" meson ninja build

      - name: Build and install package
        shell: bash -l {0}  # Use conda environment
        run: |
          # Ensure NumPy is available for build
          python -c "import numpy; print(f'NumPy {numpy.__version__} found at {numpy.get_include()}')"
          python -m build --wheel
          # Windows PowerShell doesn't expand wildcards in pip, so we need to find the wheel file
          python -c "import glob, subprocess; wheels = glob.glob('dist/*.whl'); subprocess.run(['pip', 'install'] + wheels, check=True) if wheels else print('No wheels found')"

      - name: Install test dependencies
        shell: bash -l {0}  # Use conda environment
        run: |
          pip install pytest pytest-cov
          pip install pandas biopython "pysam>=0.23.3" scipy matplotlib logomaker patchworklib

      - name: Run tests with coverage
        shell: bash -l {0}  # Use conda environment
        run: |
          pytest tests/ -v --cov=seqpandas --cov-report=term-missing --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Pre-commit Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.0
