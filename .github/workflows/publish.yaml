name: Publish to PyPI

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write  # Required for trusted publishing

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version detection

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build "meson-python>=0.15.0" "Cython>=3.0.0" "numpy>=1.21.0,<2.0.0" meson ninja

      - name: Build sdist
        run: python -m build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-14]  # Windows removed - pysam doesn't support it

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.16.5

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          # Build for Python 3.10+ only
          CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-musllinux_* *-manylinux_2_17*"
          # Use newer manylinux images to avoid CentOS 7 repository issues
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          # Install system and Python dependencies before building
          # Linux: Install system libraries needed for pysam compilation
          CIBW_BEFORE_BUILD_LINUX: "dnf install -y bzip2-devel xz-devel libcurl-devel zlib-devel && pip install 'numpy>=1.21.0,<2.0.0' && pip install 'meson-python>=0.15.0' 'Cython>=3.0.0' meson ninja"
          # macOS: Install Python dependencies (homebrew libraries usually available)
          CIBW_BEFORE_BUILD_MACOS: "pip install 'numpy>=1.21.0,<2.0.0' && pip install 'meson-python>=0.15.0' 'Cython>=3.0.0' meson ninja"
          # Test the wheels (skip SAM tests on Windows since pysam doesn't support Windows)
          CIBW_TEST_REQUIRES: "pytest pandas biopython pysam>=0.23.3 numpy<2.0.0 scipy matplotlib logomaker patchworklib"
          # Copy test data to package directory before running tests (only if different directories)
          CIBW_BEFORE_TEST: "[ '{project}' != '{package}' ] && cp -r {project}/tests {package}/ || true"
          CIBW_TEST_COMMAND: "cd {package} && pytest tests -v"
          # macOS arm64 specific settings
          CIBW_ARCHS_MACOS: "x86_64 arm64"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: [build-sdist, build-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.ref, 'refs/tags/'))
    environment:
      name: testpypi
      url: https://test.pypi.org/p/seqpandas
    permissions:
      id-token: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: cibw-*
          merge-multiple: true

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  publish-to-pypi:
    name: Publish to PyPI
    needs: [build-sdist, build-wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/seqpandas
    permissions:
      id-token: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: cibw-*
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
